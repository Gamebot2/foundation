syntax = "proto2";

package doc;

import "foundation/protos/geometry.proto";
import "foundation/protos/ocr/types.proto";

/* Union type holds one of these Entity variants. */
message Entity {
	oneof payload {
		Word word = 1;
		Line line = 2;
		Paragraph paragraph = 3;
		TableCell table_cell = 4;
		TableRow table_row = 5;
		Table table = 6;
		Number number = 7;
		Integer integer = 8;
		Date date = 9;
		Time time = 10;
		Currency currency = 11;
		PersonName name = 12;
		Address address = 13;
		Cluster cluster = 14;
		Page page = 15;
		Phrase phrase = 16;
		GenericEntity custom = 17;
		NamedEntity named_entity = 18;
	}
}

/* Generic Entity type.
	 Analagous to how machine-words in memory are just bytes, the interpretation
	 of RawData is determined by its type flag.

	 Useful if we want to support custom types that define their own wire formats.
 */
message GenericEntity {
	// The 'type' field tells a decoder how to deserialize the 'data' field.
	required string type = 1;
	required bytes data = 2;
	required geometry.BBox bbox = 3;
}

/* Corresponds to an OCR word. */
message Word {
	required string text = 1;
	required geometry.BBox bbox = 2;
	optional ocr.InputWord origin = 3;
}

/* A horizontal line of text.

	 In most cases, this would originate from an OCR line.
 */
message Line {
	repeated Word words = 1;
	required geometry.BBox bbox = 2;
}

/* A sequence of Lines.

	 This should correspond to the OCR engine's paragraphs.
*/
message Paragraph {
	repeated Line lines = 1;
	required geometry.BBox bbox = 2;
}

/* A Cell of a table.

	 Can contain arbitrary Entity data.
*/
message TableCell {
	repeated Entity content = 1;
	required geometry.BBox bbox = 2;
}

/* A Row is a sequence of table cells. */
message TableRow {
	repeated TableCell cells = 1;
	required geometry.BBox bbox = 2;
}

/* A Table is a sequence of rows.

	 TODO: do we want to support sparse tables at a protocol level?
*/
message Table {
	repeated TableRow rows = 1;
	required geometry.BBox bbox = 2;
}

/* ----- Semantic types ----- */

/* -------------------------------------------------------------------
	 These are essentially NER types. It can be useful to distinguish a set of
	 "first-class" types from some label class that a specific NER model might
	 output.
   -------------------------------------------------------------------
*/


/* A Number is a real-valued number.
*/
message Number {
	repeated Word span = 1;
	required geometry.BBox bbox = 2;
	optional double value = 3;
}

message Integer {
	repeated Word span = 1;
	required geometry.BBox bbox = 2;
	optional int64 value = 3;
}

message Date {
	repeated Word span = 1;
	required geometry.BBox bbox = 2;
	// Let this value be an ISO8601 formatted date.
	// TODO: we should settle on an appropriate denotation format here.
	optional string value = 3;
	optional double likeness_score = 4;
}

message Time {
	repeated Word span = 1;
	required geometry.BBox bbox = 2;
	// Let this value be UNIX time in seconds from the epoch.
	// TODO: we should settle on an appropriate denotation format here.
	optional uint64 value = 3;
	optional double likeness_score = 4;
}

// TODO: do we want a Datetime type?

message Currency {
	repeated Word span = 1;
	required geometry.BBox bbox = 2;
	// TODO: string is a bad denotation type,
	//       we may want a fixed-decimal representation here.
	optional string value = 3;
	optional string units = 4;
	optional double likeness_score = 5;
}

message PersonName {
	repeated Line name_parts = 1;
	required geometry.BBox bbox = 2;
	optional string value = 3;
}

message Address {
	repeated Line lines = 1;
	required geometry.BBox bbox = 2;
	// TODO: we should settle on an appropriate denotation format here.
	optional string value = 3;
}

// A somewhat generic entity returned by typical named entity recognition engines.
message NamedEntity {
	repeated Word span = 1;
	required geometry.BBox bbox = 2;
	optional string value = 3;
	optional string label = 4;
}

/* A Cluster associates a Phrase [a sequence of Tokens] with some semantic label.

	 This type should be useful to NER-like models.
*/
message Cluster {
	repeated Line span = 1;
	required geometry.BBox bbox = 2;
	optional string label = 3;
}

/* A Page is represented as another Entity type.

	 Its bounding box is its dimensions, translated by its offset within the
	 document. For example, a document with 3 pages, each 50x100, "stacking"
	 pages on top of each other would put page 2's bbox as:
	     top_left: (0, 100), bottom_right: (50, 200)
*/
message Page {
	// 1-indexed page number within the document
	required int64 index = 1;
	// Page bounding box within a document
	required geometry.BBox bbox = 2;
}

/* A sequence of words contiguous on the same line.

	 E.g. the following mock document contains two phrases,
	 but one Line:

	     Here is a phrase                Another phrase

 */
message Phrase {
	repeated Word words = 1;
	required geometry.BBox bbox = 2;
}
