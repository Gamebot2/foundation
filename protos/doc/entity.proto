syntax = "proto2";

package doc.entity;

import "ocr/types.proto";

/* Raw OCR Data.
	 Analagous to how machine-words in memory are just bytes, the interpretation
	 of RawData is determined by its type flag.

	 Useful if we want to support custom types?
 */
message RawPayload {
	// Need to think about how the 'type' string communicates how 'data' field
	// should be decoded in an arbitrary application using Foundation types.
	required string type = 1;
	required bytes data = 2;
}

message Entity {
	oneof payload {
		OcrWord ocr_word = 1;
		Line line = 2;
		Paragraph paragraph = 3;
		TableCell table_cell = 4;
		TableRow table_row = 5;
		Table table = 6;
		Token word = 7;
		Phrase phrase = 8;
		Number number = 9;
		Integer integer = 10;
		Date date = 11;
		Currency currency = 12;
		Name name = 13;
		Address address = 14;
		NamedNLP named_nlp = 15;
		Time time = 16;
		RawPayload custom = 17;
	}
}

message OcrWord {
	required ocr.InputWord word = 1;
}

message Line {
	repeated ocr.InputWord ocr_words = 1;
}

message Paragraph {
	repeated Line lines = 1;
}

message TableCell {
	// A TableCell should support heterogeneous content
	repeated Entity content = 1;
}

message TableRow {
	repeated TableCell cells = 1;
}

message Table {
	repeated TableRow rows = 1;
}

/* ----- Semantic types ----- */

/* Tokens are a semantic type, e.g. a natural-language word like "fire truck".
	 They are also a way to associate a span of ocr.InputWord with some score.
   We may also want to handle OCR errors which split natural language
   words into multiple OCR rectangles.
 */
message Token {
	repeated ocr.InputWord span = 1;
	optional double score = 2;
}

/* A Phrase is not the same as a Line.

   Phrases are semantic types, and are a sequence of words with some potential
   denotation.
*/
message Phrase {
	repeated Token words = 1;
	optional double score = 2;
}


/* -------------------------------------------------------------------
   These are essentially NER types... but it can be useful to distinguish
   from something that's explicitly output by an NER model?
   -------------------------------------------------------------------
*/


message Number {
	required Token token = 1;
	optional double value = 2;
}

message Integer {
	required Token token = 1;
	optional int64 value = 2;
}

message Date {
	required Token token = 1;
	// What should the denotation of a date be?
	optional string value = 2;
}

message Time {
	required Token token = 1;
	// unix timestamp?
	optional uint64 value = 2;
}

// do we want a Datetime type?

message Currency {
	required Token token = 1;
	// What should the denotation of a currency amount be?
	message FixedDecimal {
		required int64 integer_part = 1;
		required uint32 fractional_part = 2;
	}
	optional FixedDecimal value = 3;
	optional string units = 4;
}

message Name {
	required Phrase name_parts = 1;
	optional string value = 3;
}

message Address {
	// If we want to support single-line addresses, or non-cluster addresses
	// Then Phrase makes sense here?
	repeated Phrase lines = 1;
	optional double score = 2 [default = -1.0];
	// What should the denotation of an address be?
	optional string value = 3;
}

message NamedNLP {
	required Phrase token_span = 1;
	optional string label = 3;
}

